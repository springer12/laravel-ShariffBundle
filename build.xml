<?xml version="1.0" encoding="UTF-8"?>
<project name="Core23ShariffBundle" basedir="." default="build:main">
    <!-- Config files -->
    <property name="dir.config"                  value="${basedir}" />
    <property name="config.phpunit"              value="${dir.config}/phpunit.xml.dist" />
    <property name="config.pmd"                  value="${dir.config}/pmd.xml.dist" />

    <!-- Build paths -->
    <property name="dir.build"                   value="${basedir}/build" />
    <property name="dir.reports"                 value="${dir.build}/reports" />
    <property name="dir.reports.check"           value="${dir.reports}/check" />
    <property name="dir.reports.check.pdepend"   value="${dir.reports}/check/pdepend" />
    <property name="dir.reports.test"            value="${dir.reports}/test" />
    <property name="dir.reports.test.unit"       value="${dir.reports.test}/unit" />
    <property name="dir.reports.test.coverage"   value="${dir.reports.test}/coverage" />

    <!-- Source paths -->
    <property name="dir.src"                     value="${basedir}" />



    <!-- BUILD TASKS -->



    <!-- Main (default) task -->
    <target name="build:main"
            depends="build:clean, build:prepare, build:check, build:test"
            description="Run all test and build everything"/>

    <!-- Clean previous build files -->
    <target name="build:clean"
            description="Clean previous build files">

        <delete dir="${dir.build}" verbose="true" />

    </target>


    <!-- Prepare build (performed by each build:* task when called as standalone) -->
    <target name="build:prepare"
            description="Prepare build">

        <mkdir dir="${dir.build}" />

    </target>

    <!-- Check Project -->
    <target name="build:check"
            description="Check source code"
            depends="build:prepare, check:prepare, check:cs, check:md, check:cpd, check:pdepend, check:phploc, check:cs-fixer"/>

    <!-- Test Project -->
    <target name="build:test"
            description="Perform all tests"
            depends="build:prepare, test:prepare, test:unit"/>



    <!-- CHECK SECTION -->



    <!-- Prepare check (performed by each check:* task when called as standalone) -->
    <target name="check:prepare"
            description="Create check directories">

        <mkdir dir="${dir.reports.check}" />

    </target>


    <!-- CodeSniffer with Symfony2 convention -->
    <target name="check:cs"
            depends="check:prepare"
            description="Generate PHP_CodeSniffer report">

        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${dir.reports.check}/checkstyle.xml" />
            <arg value="--report=checkstyle" />
            <arg value="--extensions=php" />
            <arg value="--standard=Symfony2" />
            <arg value="--ignore=vendor" />
            <arg path="${dir.src}" />
        </exec>

    </target>

    <!-- PHP Copy and Paste Detector -->
    <target name="check:cpd"
            description="Generate phpcpd report"
            depends="check:prepare">

        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${dir.reports.check}/cpd.xml" />
            <arg value="--exclude=vendor" />
            <arg path="${dir.src}" />
        </exec>

    </target>

    <!-- PHP Mess detector -->
    <target name="check:md"
            description="Generate phpmd report"
            depends="check:prepare" >

        <exec executable="phpmd">
            <arg path="${dir.src}" />
            <arg value="xml" />
            <arg path="${dir.reports.check}/pmd.xml" />
            <arg value="--exclude=vendor" />
        </exec>

    </target>

    <target name="check:phploc"
            description="Generate pdepend report"
            depends="check:prepare" >

        <exec executable="phploc">
            <arg value="--count-tests" />
            <arg value="--log-xml" />
            <arg path="${dir.reports.check}/phploc.xml" />
            <arg value="--exclude=vendor" />
            <arg path="${dir.src}" />
        </exec>

    </target>

    <target name="check:pdepend"
            description="Generate pdepend report"
            depends="check:prepare" >

          <mkdir dir="${dir.reports.check.pdepend}" />

          <exec executable="pdepend">
            <arg value="--jdepend-xml=${dir.reports.check.pdepend}/jdepend.xml" />
            <arg value="--jdepend-chart=${dir.reports.check.pdepend}//dependencies.svg" />
            <arg value="--overview-pyramid=${dir.reports.check.pdepend}/overview-pyramid.svg" />
            <arg value="--ignore=vendor,Tests" />
            <arg path="${dir.src}" />
        </exec>

    </target>

    <target name="check:cs-fixer"
            description="Executes php-cs-fixer"
            depends="check:prepare">

        <exec executable="php-cs-fixer">
            <arg line="fix" />
            <arg line="--verbose" />
            <arg line="--dry-run" />
        </exec>

    </target>




    <!-- TEST SECTION -->



    <!-- Prepare test environment (performed by each test:* task when called as standalone) -->
    <target name="test:prepare"
            description="Prepare the test environment">

        <mkdir dir="${dir.reports.test}" />

        <exec executable="composer">
            <arg value="update" />
        </exec>

    </target>

    <!-- Prepare unit test environment -->
    <target name="test:unit:prepare"
            description="Prepare the unit test environment"
            depends="test:prepare">

        <mkdir dir="${dir.reports.test.unit}" />

    </target>

    <!-- Execute unit tests and code coverage -->
    <target name="test:unit"
            description="Perform unit tests and code coverage"
            depends="test:prepare, test:unit:prepare">

        <exec executable="phpunit">
            <arg line="--log-junit ${dir.reports.test.unit}/phpunit.xml" />
            <arg line="--coverage-clover ${dir.reports.test.coverage}/clover.xml" />
            <arg line="--coverage-html ${dir.reports.test.coverage}/html" />
            <arg line="-c ${config.phpunit}" />
        </exec>

    </target>

</project>
